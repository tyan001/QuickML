# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'testingGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tensorflow as tf
import numpy as np
import json

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(823, 371)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.modelDirectoryBtn = QtWidgets.QToolButton(self.centralwidget)
        self.modelDirectoryBtn.setGeometry(QtCore.QRect(10, 10, 75, 23))
        self.modelDirectoryBtn.setObjectName("modelDirectoryBtn")
        self.labelDirectoryBtn = QtWidgets.QToolButton(self.centralwidget)
        self.labelDirectoryBtn.setGeometry(QtCore.QRect(10, 40, 75, 23))
        self.labelDirectoryBtn.setObjectName("labelDirectoryBtn")
        self.modelLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.modelLineEdit.setGeometry(QtCore.QRect(190, 10, 611, 20))
        self.modelLineEdit.setObjectName("modelLineEdit")
        self.labelLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.labelLineEdit.setGeometry(QtCore.QRect(190, 40, 611, 20))
        self.labelLineEdit.setObjectName("labelLineEdit")
        self.progressBar1 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar1.setGeometry(QtCore.QRect(270, 80, 521, 23))
        self.progressBar1.setStyleSheet("QProgressBar {\n"
"    \n"
"    color: rgb(76, 32, 255);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0.00568182, y1:0.517, x2:1, y2:0.528, stop:0 rgba(0, 0, 100, 255), stop:1 rgba(0, 85, 255, 255));\n"
"}")
        self.progressBar1.setProperty("value", 24)
        self.progressBar1.setObjectName("progressBar1")
        self.predictBtn = QtWidgets.QPushButton(self.centralwidget)
        self.predictBtn.setGeometry(QtCore.QRect(100, 40, 75, 23))
        self.predictBtn.setObjectName("predictBtn")
        self.progressBar2 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar2.setGeometry(QtCore.QRect(270, 120, 521, 23))
        self.progressBar2.setStyleSheet("QProgressBar {\n"
"    \n"
"    color: rgb(76, 32, 255);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0.00568182, y1:0.517, x2:1, y2:0.528, stop:0 rgba(0, 0, 100, 255), stop:1 rgba(0, 85, 255, 255));\n"
"}")
        self.progressBar2.setProperty("value", 24)
        self.progressBar2.setObjectName("progressBar2")
        self.progressBar3 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar3.setGeometry(QtCore.QRect(270, 160, 521, 23))
        self.progressBar3.setStyleSheet("QProgressBar {\n"
"    \n"
"    color: rgb(76, 32, 255);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0.00568182, y1:0.517, x2:1, y2:0.528, stop:0 rgba(0, 0, 100, 255), stop:1 rgba(0, 85, 255, 255));\n"
"}")
        self.progressBar3.setProperty("value", 24)
        self.progressBar3.setObjectName("progressBar3")
        self.progressBar4 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar4.setGeometry(QtCore.QRect(270, 200, 521, 23))
        self.progressBar4.setStyleSheet("QProgressBar {\n"
"    \n"
"    color: rgb(76, 32, 255);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0.00568182, y1:0.517, x2:1, y2:0.528, stop:0 rgba(0, 0, 100, 255), stop:1 rgba(0, 85, 255, 255));\n"
"}")
        self.progressBar4.setProperty("value", 24)
        self.progressBar4.setObjectName("progressBar4")
        self.progressBar5 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar5.setGeometry(QtCore.QRect(270, 240, 521, 23))
        self.progressBar5.setStyleSheet("QProgressBar {\n"
"    \n"
"    color: rgb(76, 32, 255);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0.00568182, y1:0.517, x2:1, y2:0.528, stop:0 rgba(0, 0, 100, 255), stop:1 rgba(0, 85, 255, 255));\n"
"}")
        self.progressBar5.setProperty("value", 24)
        self.progressBar5.setObjectName("progressBar5")
        self.progressBar6 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar6.setGeometry(QtCore.QRect(270, 280, 521, 23))
        self.progressBar6.setStyleSheet("QProgressBar {\n"
"    \n"
"    color: rgb(76, 32, 255);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0.00568182, y1:0.517, x2:1, y2:0.528, stop:0 rgba(0, 0, 100, 255), stop:1 rgba(0, 85, 255, 255));\n"
"}")
        self.progressBar6.setProperty("value", 24)
        self.progressBar6.setObjectName("progressBar6")
        self.loadModelBtn = QtWidgets.QToolButton(self.centralwidget)
        self.loadModelBtn.setGeometry(QtCore.QRect(100, 10, 75, 23))
        self.loadModelBtn.setObjectName("loadModelBtn")
        self.label = drag_drop_label(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 70, 250, 250))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 823, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.model = tf.keras.models.Sequential([])

        self.modelDirectoryBtn.clicked.connect(lambda: self.directory_dialog())
        self.labelDirectoryBtn.clicked.connect(lambda: self.directory_dialog_2())
        self.loadModelBtn.clicked.connect(lambda: self.loadModel())
        self.predictBtn.clicked.connect(lambda: self.predict())

        self.progressBar1.hide()
        self.progressBar2.hide()
        self.progressBar3.hide()
        self.progressBar4.hide()
        self.progressBar5.hide()
        self.progressBar6.hide()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.modelDirectoryBtn.setText(_translate("MainWindow", "..."))
        self.labelDirectoryBtn.setText(_translate("MainWindow", "..."))
        self.predictBtn.setText(_translate("MainWindow", "Predict"))
        self.loadModelBtn.setText(_translate("MainWindow", "Load Model"))

    def directory_dialog(self):
        path_to_directory, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Choose File")
        self.modelLineEdit.setText(path_to_directory)

    def directory_dialog_2(self):
        path_to_directory, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Choose File")
        self.labelLineEdit.setText(path_to_directory)

    def loadModel(self):
        self.model = tf.keras.models.load_model(self.modelLineEdit.text())
        self.model.summary()

    def predict(self):
        path = self.label.image_path
        image = tf.keras.preprocessing.image.load_img(path, target_size=(150,150))
        image = tf.keras.preprocessing.image.img_to_array(image)
        predict = self.model.predict(np.expand_dims(image, axis= 0))
        predict = np.around(predict, decimals=2)
        print(predict)

        with open(self.labelLineEdit.text(), 'r') as f:
            labels = json.load(f)
            labels = list(labels)
        length = len(labels)
        for i in range(length):

            if i == 0:
                self.progressBar1.show()
                self.progressBar1.setValue(int(predict[0][i] * 100))
                self.progressBar1.setFormat(labels[i])
            elif i == 1:
                self.progressBar2.show()
                self.progressBar2.setValue(int(predict[0][i] * 100))
                self.progressBar2.setFormat(labels[i])
            elif i == 2:
                self.progressBar3.show()
                self.progressBar3.setValue(int(predict[0][i] * 100))
                self.progressBar3.setFormat(labels[i])
            elif i == 3:
                self.progressBar4.show()
                self.progressBar4.setValue(int(predict[0][i] * 100))
                self.progressBar4.setFormat(labels[i])
            elif i == 4:
                self.progressBar5.show()
                self.progressBar5.setValue(int(predict[0][i] * 100))
                self.progressBar5.setFormat(labels[i])
            elif i == 5:
                self.progressBar6.show()
                self.progressBar6.setValue(int(predict[0][i] * 100))
                self.progressBar6.setFormat(labels[i])





class drag_drop_label(QtWidgets.QLabel):

    def __init__(self, QWidget):
        super().__init__(QWidget)
        self.image_path = ''
        self.setAlignment(QtCore.Qt.AlignCenter)
        self.setText('\n\n Drop Image Here \n\n')
        self.setStyleSheet('''QLabel{border: 4px dashed #aaa}''')
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasImage:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasImage:
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasImage:
            event.setDropAction(QtCore.Qt.CopyAction)
            file_path = event.mimeData().urls()[0].toLocalFile()

            self.set_image(file_path)

            event.accept()
        else:
            event.ignore()

    def set_image(self, file_path):
        self.image_path = file_path
        Qpix = QtGui.QPixmap(file_path)
        self.setPixmap(Qpix.scaled(225, 225))

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
