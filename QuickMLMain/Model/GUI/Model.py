# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Model5.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tensorflow as tf
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow.keras.optimizers as optimizers


class Ui_Dialog(object):
    def __init__(self):
        self.input_shape = False
        self.flatten = False
        self.model = tf.keras.Sequential()
        self.folder_path = ''
        self.target_size = (150, 150)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1096, 598)
        Dialog.setStyleSheet("\n"
                             "color: rgb(0, 85, 255);\n"
                             "")
        self.ModelSummary = QtWidgets.QTextBrowser(Dialog)
        self.ModelSummary.setGeometry(QtCore.QRect(540, 40, 551, 431))
        self.ModelSummary.setObjectName("ModelSummary")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(10, 480, 1081, 23))
        self.progressBar.setStyleSheet("QProgressBar{color: rgb(255, 255, 255);\n"
                                       "background-color: rgb(98, 114, 146);\n"
                                       "border-style: none;\n"
                                       "border-radius: 10px;\n"
                                       "text-align:center;\n"
                                       "}\n"
                                       "QProgressBar::chunk{\n"
                                       "border-radius:10px;    \n"
                                       "background-color: qlineargradient(spread:pad, x1:0, y1:0.517, x2:1, y2:0.511, stop:0 rgba(0, 0, 255, 255), stop:1 rgba(170, 0, 255, 255));\n"
                                       "}\n"
                                       "")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setObjectName("progressBar")
        self.toolButton = QtWidgets.QToolButton(Dialog)
        self.toolButton.setGeometry(QtCore.QRect(10, 10, 25, 19))
        self.toolButton.setObjectName("toolButton")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(40, 10, 1051, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(Dialog)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(930, 510, 160, 80))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.saveButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.saveButton.setObjectName("saveButton")
        self.gridLayout_2.addWidget(self.saveButton, 0, 0, 1, 1)
        self.ShowModelButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.ShowModelButton.setObjectName("ShowModelButton")
        self.gridLayout_2.addWidget(self.ShowModelButton, 1, 0, 1, 1)
        self.nextButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.nextButton.setObjectName("nextButton")
        self.gridLayout_2.addWidget(self.nextButton, 0, 1, 1, 1)
        self.AuxButton = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.AuxButton.setObjectName("AuxButton")
        self.gridLayout_2.addWidget(self.AuxButton, 1, 1, 1, 1)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(10, 40, 521, 431))
        self.widget.setStyleSheet("QWidget{color: rgb(48, 58, 255); }\n"
                                  "")
        self.widget.setObjectName("widget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.widget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 521, 431))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridLayoutWidget.sizePolicy().hasHeightForWidth())
        self.gridLayoutWidget.setSizePolicy(sizePolicy)
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 2, 1, 1)
        self.DenseAcitvationBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.DenseAcitvationBox.setObjectName("DenseAcitvationBox")
        self.DenseAcitvationBox.addItem("")
        self.DenseAcitvationBox.addItem("")
        self.DenseAcitvationBox.addItem("")
        self.gridLayout.addWidget(self.DenseAcitvationBox, 3, 3, 1, 1)
        self.PoolingKernelBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.PoolingKernelBox.setObjectName("PoolingKernelBox")
        self.PoolingKernelBox.addItem("")
        self.PoolingKernelBox.addItem("")
        self.gridLayout.addWidget(self.PoolingKernelBox, 2, 2, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_7.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 0, 3, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_4.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_5.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 1, 1, 1)
        self.DenseAddButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.DenseAddButton.setObjectName("DenseAddButton")
        self.gridLayout.addWidget(self.DenseAddButton, 3, 4, 1, 1)
        self.label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 0, 1, 1)
        self.ConvolutionLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConvolutionLineEdit.sizePolicy().hasHeightForWidth())
        self.ConvolutionLineEdit.setSizePolicy(sizePolicy)
        self.ConvolutionLineEdit.setObjectName("ConvolutionLineEdit")
        self.gridLayout.addWidget(self.ConvolutionLineEdit, 1, 1, 1, 1)
        self.ConvKernelBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.ConvKernelBox.setObjectName("ConvKernelBox")
        self.ConvKernelBox.addItem("")
        self.ConvKernelBox.addItem("")
        self.ConvKernelBox.addItem("")
        self.gridLayout.addWidget(self.ConvKernelBox, 1, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 0, 1, 1)
        self.PoolingAddButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.PoolingAddButton.setObjectName("PoolingAddButton")
        self.gridLayout.addWidget(self.PoolingAddButton, 2, 4, 1, 1)
        self.ConvActivationBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.ConvActivationBox.setObjectName("ConvActivationBox")
        self.ConvActivationBox.addItem("")
        self.ConvActivationBox.addItem("")
        self.ConvActivationBox.addItem("")
        self.gridLayout.addWidget(self.ConvActivationBox, 1, 3, 1, 1)
        self.ConvolutionAddButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.ConvolutionAddButton.setObjectName("ConvolutionAddButton")
        self.gridLayout.addWidget(self.ConvolutionAddButton, 1, 4, 1, 1)
        self.DenseLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DenseLineEdit.sizePolicy().hasHeightForWidth())
        self.DenseLineEdit.setSizePolicy(sizePolicy)
        self.DenseLineEdit.setObjectName("DenseLineEdit")
        self.gridLayout.addWidget(self.DenseLineEdit, 3, 1, 1, 1)
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(0, 509, 901, 73))
        self.frame.setStyleSheet("QWidget{color: rgb(48, 58, 255); }")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.frame)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(0, -10, 901, 82))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.OptimizerComboBox = QtWidgets.QComboBox(self.gridLayoutWidget_3)
        self.OptimizerComboBox.setObjectName("OptimizerComboBox")
        self.OptimizerComboBox.addItem("")
        self.OptimizerComboBox.addItem("")
        self.OptimizerComboBox.addItem("")
        self.gridLayout_3.addWidget(self.OptimizerComboBox, 1, 2, 1, 1)
        self.LossComboBox = QtWidgets.QComboBox(self.gridLayoutWidget_3)
        self.LossComboBox.setObjectName("LossComboBox")
        self.LossComboBox.addItem("")
        self.LossComboBox.addItem("")
        self.gridLayout_3.addWidget(self.LossComboBox, 1, 3, 1, 1)
        self.CompileButton = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        self.CompileButton.setEnabled(False)
        self.CompileButton.setObjectName("CompileButton")
        self.gridLayout_3.addWidget(self.CompileButton, 1, 0, 1, 1)
        self.LearningRateLine = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.LearningRateLine.sizePolicy().hasHeightForWidth())
        self.LearningRateLine.setSizePolicy(sizePolicy)
        self.LearningRateLine.setObjectName("LearningRateLine")
        self.gridLayout_3.addWidget(self.LearningRateLine, 1, 1, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_10.setObjectName("label_10")
        self.gridLayout_3.addWidget(self.label_10, 0, 2, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_11.setObjectName("label_11")
        self.gridLayout_3.addWidget(self.label_11, 0, 3, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_9.setObjectName("label_9")
        self.gridLayout_3.addWidget(self.label_9, 0, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout_3.addWidget(self.label_8, 0, 4, 1, 1)
        self.EpochLine = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EpochLine.sizePolicy().hasHeightForWidth())
        self.EpochLine.setSizePolicy(sizePolicy)
        self.EpochLine.setObjectName("EpochLine")
        self.gridLayout_3.addWidget(self.EpochLine, 1, 4, 1, 1)
        self.progressBar.hide()

        # Push Buttons Functions
        self.ShowModelButton.clicked.connect(lambda: self.model_summary())
        self.ConvolutionAddButton.clicked.connect(lambda: self.add_layer(0))
        self.PoolingAddButton.clicked.connect(lambda: self.add_layer(1))
        self.DenseAddButton.clicked.connect(lambda: self.add_layer(2))
        self.toolButton.clicked.connect(lambda: self.pick_folder())
        self.CompileButton.clicked.connect(lambda: self.model_compile())
        self.AuxButton.clicked.connect(lambda: self.run_model())
        #self.AuxButton.clicked.connect(lambda: self.test_func())
        # Push Buttons

        # Check Events #
        self.ConvolutionLineEdit.textChanged.connect(lambda: self.on_line_edit_changed(0))
        self.DenseLineEdit.textChanged.connect(lambda: self.on_line_edit_changed(1))
        # Check Events #
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.toolButton.setText(_translate("Dialog", "..."))
        self.saveButton.setText(_translate("Dialog", "Save"))
        self.ShowModelButton.setText(_translate("Dialog", "Show Model"))
        self.nextButton.setText(_translate("Dialog", "Next"))
        self.AuxButton.setText(_translate("Dialog", "Aux"))
        self.label_6.setText(_translate("Dialog", "Kernel Size"))
        self.DenseAcitvationBox.setItemText(0, _translate("Dialog", "sigmoid"))
        self.DenseAcitvationBox.setItemText(1, _translate("Dialog", "tanh"))
        self.DenseAcitvationBox.setItemText(2, _translate("Dialog", "relu"))
        self.PoolingKernelBox.setItemText(0, _translate("Dialog", "(2,2)"))
        self.PoolingKernelBox.setItemText(1, _translate("Dialog", "(3,3)"))
        self.label_7.setText(_translate("Dialog", "Activation"))
        self.label_4.setText(_translate("Dialog", "Layers"))
        self.label_5.setText(_translate("Dialog", "Kernel/Neurons"))
        self.DenseAddButton.setText(_translate("Dialog", "Add"))
        self.label.setText(_translate("Dialog", "Convolution"))
        self.label_3.setText(_translate("Dialog", "Dense"))
        self.ConvolutionLineEdit.setText(_translate("Dialog", "32"))
        self.ConvKernelBox.setItemText(0, _translate("Dialog", "(2,2)"))
        self.ConvKernelBox.setItemText(1, _translate("Dialog", "(3,3)"))
        self.ConvKernelBox.setItemText(2, _translate("Dialog", "(4,4)"))
        self.label_2.setText(_translate("Dialog", "Max Pooling"))
        self.PoolingAddButton.setText(_translate("Dialog", "Add"))
        self.ConvActivationBox.setItemText(0, _translate("Dialog", "sigmoid"))
        self.ConvActivationBox.setItemText(1, _translate("Dialog", "tanh"))
        self.ConvActivationBox.setItemText(2, _translate("Dialog", "relu"))
        self.ConvolutionAddButton.setText(_translate("Dialog", "Add"))
        self.DenseLineEdit.setText(_translate("Dialog", "512"))
        self.OptimizerComboBox.setItemText(0, _translate("Dialog", "Adam"))
        self.OptimizerComboBox.setItemText(1, _translate("Dialog", "RMSProp"))
        self.OptimizerComboBox.setItemText(2, _translate("Dialog", "SGD"))
        self.LossComboBox.setItemText(0, _translate("Dialog", "binary_crossentropy"))
        self.LossComboBox.setItemText(1, _translate("Dialog", "categorical_crossentropy"))
        self.CompileButton.setText(_translate("Dialog", "Compile"))
        self.LearningRateLine.setText(_translate("Dialog", "0.001"))
        self.label_10.setText(_translate("Dialog", "Optimizer"))
        self.label_11.setText(_translate("Dialog", "Loss Function"))
        self.label_9.setText(_translate("Dialog", "Learning rate"))
        self.label_8.setText(_translate("Dialog", "Epochs"))
        self.EpochLine.setText(_translate("Dialog", "50"))
        #
        self.lineEdit.setText(QtCore.QDir.currentPath())
        self.folder_path = QtCore.QDir.currentPath()
        #

    def test_func(self):
        callback = Epoch_Callback(50, self.progressBar)

    def model_summary(self):
        """
        Function to print model summary onto a text box.
        :return:
        """
        string_list = []
        self.model.summary(line_length=65, print_fn=lambda x: string_list.append(x))
        short_model_summary = "\n".join(string_list)
        self.ModelSummary.setText(short_model_summary)

    def add_layer(self, layer):
        """
        This function is used to add the layers to the model with the use of corresponding buttons. Since we only need
        to put the input shape once we have a boolean operation to just put it once, same goes for the flatten layer
        operation.

        :param layer:
        Which layer you want to use, 0 for Convolution2D layer, 1 for MaxPooling2D layer, 2 for Dense layer
        """

        if layer == 0:
            # print(self.input_shape)
            if not self.input_shape:
                self.model.add(tf.keras.layers.Conv2D(int(self.ConvolutionLineEdit.text()),
                                                      eval(self.ConvKernelBox.currentText()),
                                                      activation=self.ConvActivationBox.currentText(),
                                                      input_shape=(self.target_size[0], self.target_size[1], 3)))
                self.input_shape = True
            else:
                self.model.add(tf.keras.layers.Conv2D(int(self.ConvolutionLineEdit.text()),
                                                      eval(self.ConvKernelBox.currentText()),
                                                      activation=self.ConvActivationBox.currentText()
                                                      ))

        elif layer == 1:
            self.model.add(tf.keras.layers.MaxPool2D(eval(self.PoolingKernelBox.currentText())))

        elif layer == 2:
            # print(self.flatten)
            if not self.flatten:
                self.model.add(tf.keras.layers.Flatten())
                self.model.add(tf.keras.layers.Dense(int(self.DenseLineEdit.text()),
                                                     activation=self.DenseAcitvationBox.currentText()))
                self.ConvolutionAddButton.setEnabled(False)
                self.PoolingAddButton.setEnabled(False)
                self.CompileButton.setEnabled(True)
                self.flatten = True
            else:
                self.model.add(tf.keras.layers.Dense(int(self.DenseLineEdit.text()),
                                                     activation=self.DenseAcitvationBox.currentText()))

    def on_line_edit_changed(self, value):
        """
        This function is used as a checker for when a QLineEdit object is changed.
        :param value:
        When value is set to 0 it checks on the QLineEdit for the Convolutional section
        When value is set to 1 it checks on the QLineEdit for the Dense section
        """
        if value == 0:
            x = eval(self.ConvolutionLineEdit.text())
            if x > 32:
                self.ConvolutionLineEdit.setText('32')
        elif value == 1:
            x = eval(self.DenseLineEdit.text())
            if x > 512:
                self.DenseLineEdit.setText('512')

    def pick_folder(self):
        """
        Function for file dialog to pick a folder
        """

        self.folder_path = QtWidgets.QFileDialog.getExistingDirectory(None, "Choose Directory")
        self.lineEdit.setText(self.folder_path)

    def run_model(self):

        if self.directory_error_check():
            training_dir, testing_dir, num_categories = self.data_directories()
        else:
            return

        if num_categories > 2 and self.LossComboBox.currentText() == self.LossComboBox.itemText(0):
            self.quick_message_box(title='Warning', message='detected more than 2 categories set loss to categorical',
                                   btn=QtWidgets.QMessageBox.Ok, icon=QtWidgets.QMessageBox.Warning)
            return

        datagen = ImageDataGenerator(1. / 255)

        if self.LossComboBox.currentText() == self.LossComboBox.itemText(0):
            train_generator = datagen.flow_from_directory(training_dir,
                                                          target_size=self.target_size,
                                                          class_mode='binary',
                                                          batch_size=32)

            testing_generator = datagen.flow_from_directory(testing_dir,
                                                            target_size=self.target_size,
                                                            class_mode='binary',
                                                            batch_size=32)

            self.model.add(tf.keras.layers.Dense(1, activation='sigmoid'))
            self.model_summary()

        elif self.LossComboBox.currentText() == self.LossComboBox.itemText(1):
            print(training_dir)
            print(testing_dir)
            train_generator = datagen.flow_from_directory(training_dir,
                                                          target_size=self.target_size,
                                                          class_mode="categorical",
                                                          batch_size=32)

            testing_generator = datagen.flow_from_directory(testing_dir,
                                                            target_size=self.target_size,
                                                            class_mode="categorical",
                                                            batch_size=32)

            self.model.add(tf.keras.layers.Dense(num_categories, activation='softmax'))
            self.model_summary()

        self.progressBar.show()
        callback = Epoch_Callback(int(self.EpochLine.text()), self.progressBar)
        history = self.model.fit(train_generator, validation_data=testing_generator, epochs=int(self.EpochLine.text()),
                                 callbacks=[callback])


    def model_compile(self):
        opt = self.ret_optimizer(self.OptimizerComboBox.currentText())
        self.model.compile(optimizer=opt, loss=self.LossComboBox.currentText(), metrics=['accuracy'])

    def directory_error_check(self):
        """
        Function to check that the directory that was pass is structure correctly
        """

        training_dir = os.path.join(self.folder_path, 'training').replace("\\", '/')
        testing_dir = os.path.join(self.folder_path, 'testing').replace("\\", '/')
        is_dir1 = os.path.isdir(training_dir)
        is_dir2 = os.path.isdir(testing_dir)

        # print(os.path.join(self.folder_path, 'train').replace("/", '\\'))
        # print(os.path.join(self.folder_path, 'test').replace("/", "\\"))

        if not is_dir1:
            # print("Do not find training directory under {}".format(self.folder_path))
            msg = "Do not find training directory under {}".format(self.folder_path)
            self.quick_message_box(title='error', message=msg)
            return False
        if not is_dir2:
            # print("Do not find testing directory under {}".format(self.folder_path))
            msg = "Do not find testing directory under {}".format(self.folder_path)
            self.quick_message_box(title='error', message=msg)
            return False

        return True

    def data_directories(self):
        """
        Function to check that the directory that was pass to start training on model is structure correctly
        :return:
        training_dir = path to the training directory
        testing_dir = path to the testing directory
        """

        training_dir = os.path.join(self.folder_path, 'training').replace("\\", '/')
        testing_dir = os.path.join(self.folder_path, 'testing').replace("\\", '/')
        num_folders = 0

        for _, dir_names, filenames in os.walk(training_dir):
            # ^ this idiom means "we won't be using this value"
            num_folders += len(dir_names)
        # print(num_folders)

        return training_dir, testing_dir, num_folders

    def ret_optimizer(self, i):
        switcher = {
            self.OptimizerComboBox.itemText(0): optimizers.Adam(float(self.LearningRateLine.text())),
            self.OptimizerComboBox.itemText(1): optimizers.RMSprop(float(self.LearningRateLine.text())),
            self.OptimizerComboBox.itemText(2): optimizers.SGD(float(self.LearningRateLine.text()))
        }

        return switcher.get(i, 'Invalid')

    @staticmethod
    def quick_message_box(title='', message='', btn=QtWidgets.QMessageBox.Ok, icon=QtWidgets.QMessageBox.Warning):
        """
        Function to make quick message boxes for errors or warnings.
        :param title: Title of the message box
        :param message: The message that will be in the message box
        :param btn: buttons you want on the message box,
                    ex: QtWidgets.QMessageBox.Ok, (QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No)
        :param icon: icon to put on message box
                     QtWidgets.QMessageBox.Warning, QtWidgets.QMessageBox.Question, QtWidgets.QMessageBox.Question
        :return:
        """

        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setStandardButtons(btn)
        msg_box.setIcon(icon)
        msg_box.exec()


class Epoch_Callback(tf.keras.callbacks.Callback):

    def __init__(self, total_epoch, progressBar=QtWidgets.QProgressBar):
        self.total_epoch = total_epoch
        self.progressBar = progressBar

    def on_epoch_end(self, epoch, logs={}):
        percent_done = int(((epoch+1) / self.total_epoch)*100)
        self.progressBar.setValue(percent_done)

