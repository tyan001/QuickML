# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Model3.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tensorflow as tf


class Ui_Dialog(object):
    def __init__(self):
        self.input_shape = False
        self.flatten = False
        self.model = tf.keras.Sequential()

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1147, 627)
        self.gridLayoutWidget = QtWidgets.QWidget(Dialog)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 80, 521, 431))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gridLayoutWidget.sizePolicy().hasHeightForWidth())
        self.gridLayoutWidget.setSizePolicy(sizePolicy)
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.DenseLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DenseLineEdit.sizePolicy().hasHeightForWidth())
        self.DenseLineEdit.setSizePolicy(sizePolicy)
        self.DenseLineEdit.setObjectName("DenseLineEdit")
        self.gridLayout.addWidget(self.DenseLineEdit, 3, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_4.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_5.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 2, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_7.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignHCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 0, 3, 1, 1)
        self.ConvolutionLineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ConvolutionLineEdit.sizePolicy().hasHeightForWidth())
        self.ConvolutionLineEdit.setSizePolicy(sizePolicy)
        self.ConvolutionLineEdit.setObjectName("ConvolutionLineEdit")
        self.gridLayout.addWidget(self.ConvolutionLineEdit, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 0, 1, 1)
        self.DenseAcitvationBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.DenseAcitvationBox.setObjectName("DenseAcitvationBox")
        self.DenseAcitvationBox.addItem("")
        self.DenseAcitvationBox.addItem("")
        self.DenseAcitvationBox.addItem("")
        self.gridLayout.addWidget(self.DenseAcitvationBox, 3, 3, 1, 1)
        self.DenseAddButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.DenseAddButton.setObjectName("DenseAddButton")
        self.gridLayout.addWidget(self.DenseAddButton, 3, 4, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 0, 1, 1)
        self.PoolingAddButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.PoolingAddButton.setObjectName("PoolingAddButton")
        self.gridLayout.addWidget(self.PoolingAddButton, 2, 4, 1, 1)
        self.ConvKernelBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.ConvKernelBox.setObjectName("ConvKernelBox")
        self.ConvKernelBox.addItem("")
        self.ConvKernelBox.addItem("")
        self.ConvKernelBox.addItem("")
        self.gridLayout.addWidget(self.ConvKernelBox, 1, 2, 1, 1)
        self.label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        self.ConvActivationBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.ConvActivationBox.setObjectName("ConvActivationBox")
        self.ConvActivationBox.addItem("")
        self.ConvActivationBox.addItem("")
        self.ConvActivationBox.addItem("")
        self.gridLayout.addWidget(self.ConvActivationBox, 1, 3, 1, 1)
        self.ConvolutionAddButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.ConvolutionAddButton.setObjectName("ConvolutionAddButton")
        self.gridLayout.addWidget(self.ConvolutionAddButton, 1, 4, 1, 1)
        self.PoolingKernelBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.PoolingKernelBox.setObjectName("PoolingKernelBox")
        self.PoolingKernelBox.addItem("")
        self.PoolingKernelBox.addItem("")
        self.gridLayout.addWidget(self.PoolingKernelBox, 2, 2, 1, 1)
        self.ModelSummary = QtWidgets.QTextBrowser(Dialog)
        self.ModelSummary.setGeometry(QtCore.QRect(540, 80, 551, 431))
        self.ModelSummary.setObjectName("ModelSummary")
        # self.ModelSummary.setFontPointSize(8)
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(10, 530, 1081, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.ProgressButton = QtWidgets.QPushButton(Dialog)
        self.ProgressButton.setGeometry(QtCore.QRect(810, 580, 75, 23))
        self.ProgressButton.setObjectName("ProgressButton")
        self.progressBar.hide()

        # Test Model #
        # Push Buttons Functions #

        self.ProgressButton.clicked.connect(lambda: self.model_summary())
        self.ConvolutionAddButton.clicked.connect(lambda: self.add_layer(0))
        self.PoolingAddButton.clicked.connect(lambda: self.add_layer(1))
        self.DenseAddButton.clicked.connect(lambda: self.add_layer(2))

        # Push Buttons Functions #

        # Check Events #
        self.ConvolutionLineEdit.textChanged.connect(lambda: self.on_line_edit_changed(0))
        self.DenseLineEdit.textChanged.connect(lambda: self.on_line_edit_changed(1))
        # Check Events #



        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label_4.setText(_translate("Dialog", "Layers"))
        self.label_5.setText(_translate("Dialog", "Kernel/Neurons"))
        self.label_6.setText(_translate("Dialog", "Kernel Size"))
        self.label_7.setText(_translate("Dialog", "Activation"))
        self.label_3.setText(_translate("Dialog", "Dense"))
        self.DenseAcitvationBox.setItemText(0, _translate("Dialog", "sigmoid"))
        self.DenseAcitvationBox.setItemText(1, _translate("Dialog", "tanh"))
        self.DenseAcitvationBox.setItemText(2, _translate("Dialog", "relu"))
        self.DenseAddButton.setText(_translate("Dialog", "Add"))
        self.label_2.setText(_translate("Dialog", "Max Pooling"))
        self.PoolingAddButton.setText(_translate("Dialog", "Add"))
        self.ConvKernelBox.setItemText(0, _translate("Dialog", "(2,2)"))
        self.ConvKernelBox.setItemText(1, _translate("Dialog", "(3,3)"))
        self.ConvKernelBox.setItemText(2, _translate("Dialog", "(4,4)"))
        self.label.setText(_translate("Dialog", "Convolution"))
        self.ConvActivationBox.setItemText(0, _translate("Dialog", "sigmoid"))
        self.ConvActivationBox.setItemText(1, _translate("Dialog", "tanh"))
        self.ConvActivationBox.setItemText(2, _translate("Dialog", "relu"))
        self.ConvolutionAddButton.setText(_translate("Dialog", "Add"))
        self.PoolingKernelBox.setItemText(0, _translate("Dialog", "(2,2)"))
        self.PoolingKernelBox.setItemText(1, _translate("Dialog", "(3,3)"))
        self.ProgressButton.setText(_translate("Dialog", "ProgressBar"))

    def show_bar(self):
        self.progressBar.show()

    def test_func(self):
        print('test section')

    def model_summary(self):
        string_list = []
        self.model.summary(line_length=65, print_fn=lambda x: string_list.append(x))
        short_model_summary = "\n".join(string_list)
        self.ModelSummary.setText(short_model_summary)

    def add_layer(self, layer):
        """
        This function is used to add the layers to the model with the use of corresponding buttons. Since we only need
        to put the input shape once we have a boolean operation to just put it once, same goes for the flatten layer
        operation.

        :param layer:
        Which layer you want to use, 0 for Convolution2D layer, 1 for MaxPooling2D layer, 2 for Dense layer
        """



        if layer == 0:
            #print(self.input_shape)
            if not self.input_shape:
                self.model.add(tf.keras.layers.Conv2D(float(self.ConvolutionLineEdit.text()),
                                                      eval(self.ConvKernelBox.currentText()),
                                                      activation=self.ConvActivationBox.currentText(),
                                                      input_shape=(128, 128, 3)))
                self.input_shape = True
            else:
                self.model.add(tf.keras.layers.Conv2D(float(self.ConvolutionLineEdit.text()),
                                                      eval(self.ConvKernelBox.currentText()),
                                                      activation=self.ConvActivationBox.currentText()
                                                      ))

        elif layer == 1:
            self.model.add(tf.keras.layers.MaxPool2D(eval(self.PoolingKernelBox.currentText())))

        elif layer == 2:
            #print(self.flatten)
            if not self.flatten:
                self.model.add(tf.keras.layers.Flatten())
                self.model.add(tf.keras.layers.Dense(float(self.DenseLineEdit.text()),
                                                     activation=self.DenseAcitvationBox.currentText()))
                self.ConvolutionAddButton.setEnabled(False)
                self.PoolingAddButton.setEnabled(False)
                self.flatten = True
            else:
                self.model.add(tf.keras.layers.Dense(float(self.DenseLineEdit.text()),
                                                     activation=self.DenseAcitvationBox.currentText()))

    def on_line_edit_changed(self, value):
        """
        This function is used as a checker for when a QLineEdit object is changed.
        :param value:
        When value is set to 0 it checks on the QLineEdit for the Convolutional section
        When value is set to 1 it checks on the QLineEdit for the Dense section
        """
        if value == 0:
            x = eval(self.ConvolutionLineEdit.text())
            if x > 32:
                self.ConvolutionLineEdit.setText('32')
        elif value == 1:
            x = eval(self.DenseLineEdit.text())
            if x > 512:
                self.DenseLineEdit.setText('512')