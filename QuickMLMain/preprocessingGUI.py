# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NeuralNetworkGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import preprocessingFunctions


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1130, 722)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.addDirectoryBtn = QtWidgets.QToolButton(self.centralwidget)
        self.addDirectoryBtn.setGeometry(QtCore.QRect(10, 10, 75, 23))
        self.addDirectoryBtn.setObjectName("addDirectoryBtn")
        self.toolBtn = QtWidgets.QToolButton(self.centralwidget)
        self.toolBtn.setGeometry(QtCore.QRect(90, 10, 75, 23))
        self.toolBtn.setObjectName("toolBtn")
        self.deleteBtn = QtWidgets.QPushButton(self.centralwidget)
        self.deleteBtn.setGeometry(QtCore.QRect(950, 610, 75, 23))
        self.deleteBtn.setObjectName("deleteBtn")
        self.deleteAllBtn = QtWidgets.QPushButton(self.centralwidget)
        self.deleteAllBtn.setGeometry(QtCore.QRect(1030, 610, 75, 23))
        self.deleteAllBtn.setObjectName("deleteAllBtn")
        self.nextBtn = QtWidgets.QPushButton(self.centralwidget)
        self.nextBtn.setGeometry(QtCore.QRect(950, 640, 75, 23))
        self.nextBtn.setObjectName("nextBtn")
        self.cancelBtn = QtWidgets.QPushButton(self.centralwidget)
        self.cancelBtn.setGeometry(QtCore.QRect(1030, 640, 75, 23))
        self.cancelBtn.setObjectName("cancelBtn")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 40, 461, 641))
        self.listWidget.setObjectName("listWidget")
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setGeometry(QtCore.QRect(480, 40, 461, 641))
        self.listWidget_2.setObjectName("listWidget_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(170, 10, 771, 20))
        self.lineEdit.setObjectName("lineEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1130, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.deleteBtn.clicked.connect(lambda: self.delete_class_dia())
        self.toolBtn.clicked.connect(lambda: self.directory_dialog())
        self.addDirectoryBtn.clicked.connect(lambda: self.add_directory())
        self.nextBtn.clicked.connect(lambda: self.create_directory())
        self.cancelBtn.clicked.connect(lambda: self.close_dialog())
        self.deleteAllBtn.clicked.connect(lambda: self.delete_all())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.addDirectoryBtn.setText(_translate("MainWindow", "+"))
        self.toolBtn.setText(_translate("MainWindow", "..."))
        self.deleteBtn.setText(_translate("MainWindow", "Delete"))
        self.deleteAllBtn.setText(_translate("MainWindow", "Delete All"))
        self.nextBtn.setText(_translate("MainWindow", "Next"))
        self.cancelBtn.setText(_translate("MainWindow", "Cancel"))

    def close_dialog(self):
        close_message = QtWidgets.QMessageBox()
        close_message.setWindowTitle("Continue?")
        close_message.setText("You sure you want to close?")
        close_message.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        close_message.setIcon(QtWidgets.QMessageBox.Question)
        ret = close_message.exec()

        if ret == QtWidgets.QMessageBox.Yes:
            QtCore.QCoreApplication.instance().quit()

    def directory_dialog(self):
        path_to_directory = QtWidgets.QFileDialog.getExistingDirectory(None, "Choose Directory")
        self.lineEdit.setText(path_to_directory)

    def add_directory(self):
        path_to_directory = self.lineEdit.text()
        self.listWidget.addItem(path_to_directory)
        self.create_class_dia()

    def create_class_dia(self):
        class_dia, result = QtWidgets.QInputDialog.getText(MainWindow, "Class Name", "Input Class Name")
        if result:
            self.listWidget_2.addItem(class_dia)

    def delete_class_dia(self):
        index = self.listWidget.currentRow()
        item1 = self.listWidget.takeItem(index)
        item2 = self.listWidget_2.takeItem(index)
        self.listWidget.removeItemWidget(item1)
        self.listWidget_2.removeItemWidget(item2)

    def delete_all(self):
        self.listWidget.clear()
        self.listWidget_2.clear()

    def zip_directories(self):
        paths = []
        labels = []
        for index in range(self.listWidget.count()):
            paths.append(self.listWidget.item(index).text())
            labels.append(self.listWidget_2.item(index).text())

        preprocessingFunctions.zip_files(paths, labels)

    def finish_dialog(self):
        finish_message = QtWidgets.QMessageBox()
        finish_message.setWindowTitle("Finished")
        finish_message.setText("Program has finished")
        finish_message.setStandardButtons(QtWidgets.QMessageBox.Ok)
        finish_message.setIcon(QtWidgets.QMessageBox.Information)
        ret = finish_message.exec()

    def create_directory(self):
        project_name, result = QtWidgets.QInputDialog.getText(MainWindow, "Project Name", "Input Project Name")
        if result:
            preprocessingFunctions.create_directory(project_name)
        else:
            print("fail")

        paths = []
        labels = []
        for index in range(self.listWidget.count()):
            paths.append(self.listWidget.item(index).text())
            labels.append(self.listWidget_2.item(index).text())

        preprocessingFunctions.copy_directory(paths, labels, project_name)
        preprocessingFunctions.zip_files(project_name, project_name)
        preprocessingFunctions.remove_directory(project_name)
        self.finish_dialog()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
